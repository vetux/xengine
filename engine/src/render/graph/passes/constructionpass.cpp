/**
 *  xEngine - C++ Game Engine Library
 *  Copyright (C) 2023  Julian Zampiccoli
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "xng/render/graph/passes/constructionpass.hpp"
#include "xng/render/graph/framegraphbuilder.hpp"
#include "xng/render/graph/framegraphproperties.hpp"
#include "xng/render/textureatlas.hpp"

#include "xng/io/protocol/jsonprotocol.hpp"

#include "xng/resource/parsers/jsonparser.hpp"

#include "xng/geometry/vertexstream.hpp"

#include "graph/constructionpass_vs.hpp" // Generated by cmake
#include "graph/constructionpass_vs_skinned.hpp" // Generated by cmake
#include "graph/constructionpass_fs.hpp" // Generated by cmake

namespace xng {
#pragma pack(push, 1)
    struct ShaderAtlasTexture {
        int level_index_filtering_assigned[4]{0, 0, 0, 0};
        float atlasScale_texSize[4]{0, 0, 0, 0};
    };

    struct ShaderDrawData {
        Mat4f model;
        Mat4f mvp;

        int shadeModel_objectID_boneOffset[4]{0, 0, 0, 0};
        float metallic_roughness_ambientOcclusion_shininess[4]{0, 0, 0, 0};

        float diffuseColor[4]{0, 0, 0, 0};
        float ambientColor[4]{0, 0, 0, 0};
        float specularColor[4]{0, 0, 0, 0};

        float normalIntensity[4]{0, 0, 0, 0};

        ShaderAtlasTexture normal;

        ShaderAtlasTexture metallic;
        ShaderAtlasTexture roughness;
        ShaderAtlasTexture ambientOcclusion;

        ShaderAtlasTexture diffuse;
        ShaderAtlasTexture ambient;
        ShaderAtlasTexture specular;
        ShaderAtlasTexture shininess;
    };
#pragma pack(pop)

    ConstructionPass::ConstructionPass() {}

    void ConstructionPass::setup(FrameGraphBuilder &builder) {
        renderSize = builder.getRenderSize();
        renderTargetRes = builder.createRenderTarget(RenderTargetDesc{
                .size = renderSize,
                .multisample = false,
                .samples = 0,
                .numberOfColorAttachments = 8,
                .hasDepthStencilAttachment = true,
        });
        RenderTargetDesc targetDesc;
        targetDesc.size = renderSize;
        targetDesc.numberOfColorAttachments = 3;
        targetDesc.hasDepthStencilAttachment = true;
        clearTargetRes = builder.createRenderTarget(targetDesc);

        builder.read(renderTargetRes);
        builder.read(clearTargetRes);

        if (!renderPipelineRes.assigned) {
            renderPipelineRes = builder.createPipeline(RenderPipelineDesc{
                    .shaders = {{VERTEX,   constructionpass_vs},
                                {FRAGMENT, constructionpass_fs}},
                    .bindings = {
                            BIND_SHADER_STORAGE_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER
                    },
                    .vertexLayout = Mesh::getDefaultVertexLayout(),
                    /*       .clearColorValue = ColorRGBA(0, 0, 0, 0),
                           .clearColor = false,
                           .clearDepth = false,
                           .clearStencil = false,*/
                    .enableDepthTest = true,
                    .depthTestWrite = true,
                    .depthTestMode = DEPTH_TEST_LESS,
                    .enableFaceCulling = true,
                    .enableBlending = false
            });
        }

        builder.persist(renderPipelineRes);
        builder.read(renderPipelineRes);

        if (!renderPipelineSkinnedRes.assigned) {
            renderPipelineSkinnedRes = builder.createPipeline(RenderPipelineDesc{
                    .shaders = {{VERTEX,   constructionpass_vs_skinned},
                                {FRAGMENT, constructionpass_fs}},
                    .bindings = {
                            BIND_SHADER_STORAGE_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_TEXTURE_ARRAY_BUFFER,
                            BIND_SHADER_STORAGE_BUFFER,
                    },
                    .vertexLayout = SkinnedMesh::getDefaultVertexLayout(),
                    /*       .clearColorValue = ColorRGBA(0, 0, 0, 0),
                           .clearColor = false,
                           .clearDepth = false,
                           .clearStencil = false,*/
                    .enableDepthTest = true,
                    .depthTestWrite = true,
                    .depthTestMode = DEPTH_TEST_LESS,
                    .enableFaceCulling = true,
                    .enableBlending = false
            });
        }

        builder.persist(renderPipelineSkinnedRes);
        builder.read(renderPipelineSkinnedRes);

        if (!vertexArrayObjectRes.assigned) {
            vertexArrayObjectRes = builder.createVertexArrayObject(VertexArrayObjectDesc{
                    .vertexLayout = SkinnedMesh::getDefaultVertexLayout()
            });
        }

        builder.read(vertexArrayObjectRes);
        builder.write(vertexArrayObjectRes);
        builder.persist(vertexArrayObjectRes);

        renderPassRes = builder.createRenderPass(RenderPassDesc{
                .numberOfColorAttachments = 8,
                .hasDepthStencilAttachment = true
        });
        builder.read(renderPassRes);

        RenderPassDesc passDesc;
        passDesc.numberOfColorAttachments = 3;
        passDesc.hasDepthStencilAttachment = true;
        clearPassRes = builder.createRenderPass(passDesc);
        builder.read(clearPassRes);

        auto desc = TextureBufferDesc();
        desc.size = renderSize;

        desc.format = RGBA32F;
        gBufferPosition = builder.createTextureBuffer(desc);
        builder.write(gBufferPosition);
        gBufferNormal = builder.createTextureBuffer(desc);
        builder.write(gBufferNormal);
        gBufferTangent = builder.createTextureBuffer(desc);
        builder.write(gBufferTangent);
        gBufferRoughnessMetallicAmbientOcclusion = builder.createTextureBuffer(desc);
        builder.write(gBufferRoughnessMetallicAmbientOcclusion);

        desc.format = RGBA;
        gBufferAlbedo = builder.createTextureBuffer(desc);
        builder.write(gBufferAlbedo);
        gBufferAmbient = builder.createTextureBuffer(desc);
        builder.write(gBufferAmbient);
        gBufferSpecular = builder.createTextureBuffer(desc);
        builder.write(gBufferSpecular);

        desc.format = RGBA32I;
        gBufferModelObject = builder.createTextureBuffer(desc);
        builder.write(gBufferModelObject);

        desc.format = DEPTH_STENCIL;
        gBufferDepth = builder.createTextureBuffer(desc);
        builder.write(gBufferDepth);

        objects.clear();

        size_t totalShaderBufferSize = 0;

        usedTextures.clear();
        usedMeshes.clear();

        size_t boneCount = 0;

        auto tmp = builder.getScene().rootNode.findAll({typeid(Scene::SkinnedMeshProperty)});
        for (auto id = 0; id < tmp.size(); id++) {
            auto &object = tmp.at(id);
            auto &meshProp = object.getProperty<Scene::SkinnedMeshProperty>();
            if (meshProp.mesh.assigned()) {
                auto it = object.properties.find(typeid(Scene::MaterialProperty));
                Scene::MaterialProperty matProp;
                if (it != object.properties.end()) {
                    matProp = it->second->get<Scene::MaterialProperty>();
                }

                meshAllocator.prepareMeshAllocation(meshProp.mesh);
                usedMeshes.insert(meshProp.mesh.getUri());

                for (auto i = 0; i < meshProp.mesh.get().subMeshes.size() + 1; i++) {
                    auto &mesh = i == 0 ? meshProp.mesh.get() : meshProp.mesh.get().subMeshes.at(i - 1);

                    Material mat = mesh.material.get();

                    auto mi = matProp.materials.find(i);
                    if (mi != matProp.materials.end()) {
                        mat = mi->second.get();
                    }

                    if (mat.transparent
                        || mat.shader.assigned()) {
                        continue;
                    }

                    boneCount += mesh.bones.size();

                    if (mat.normal.assigned()) {
                        if (textures.find(mat.normal.getUri()) == textures.end()) {
                            textures[mat.normal.getUri()] = atlas.add(mat.normal.get().image.get());
                        }
                        usedTextures.insert(mat.normal.getUri());
                    }
                    if (mat.metallicTexture.assigned()) {
                        if (textures.find(mat.metallicTexture.getUri()) == textures.end()) {
                            textures[mat.metallicTexture.getUri()] = atlas.add(mat.metallicTexture.get().image.get());
                        }
                        usedTextures.insert(mat.metallicTexture.getUri());
                    }
                    if (mat.roughnessTexture.assigned()) {
                        if (textures.find(mat.roughnessTexture.getUri()) == textures.end()) {
                            textures[mat.roughnessTexture.getUri()] = atlas.add(mat.roughnessTexture.get().image.get());
                        }
                        usedTextures.insert(mat.roughnessTexture.getUri());
                    }
                    if (mat.ambientOcclusionTexture.assigned()) {
                        if (textures.find(mat.ambientOcclusionTexture.getUri()) == textures.end()) {
                            textures[mat.ambientOcclusionTexture.getUri()] = atlas.add(
                                    mat.ambientOcclusionTexture.get().image.get());
                        }
                        usedTextures.insert(mat.ambientOcclusionTexture.getUri());
                    }
                    if (mat.diffuseTexture.assigned()) {
                        if (textures.find(mat.diffuseTexture.getUri()) == textures.end()) {
                            textures[mat.diffuseTexture.getUri()] = atlas.add(mat.diffuseTexture.get().image.get());
                        }
                        usedTextures.insert(mat.diffuseTexture.getUri());
                    }
                    if (mat.ambientTexture.assigned()) {
                        if (textures.find(mat.ambientTexture.getUri()) == textures.end()) {
                            textures[mat.ambientTexture.getUri()] = atlas.add(mat.ambientTexture.get().image.get());
                        }
                        usedTextures.insert(mat.ambientTexture.getUri());
                    }
                    if (mat.specularTexture.assigned()) {
                        if (textures.find(mat.specularTexture.getUri()) == textures.end()) {
                            textures[mat.specularTexture.getUri()] = atlas.add(mat.specularTexture.get().image.get());
                        }
                        usedTextures.insert(mat.specularTexture.getUri());
                    }
                    if (mat.shininessTexture.assigned()) {
                        if (textures.find(mat.shininessTexture.getUri()) == textures.end()) {
                            textures[mat.shininessTexture.getUri()] = atlas.add(mat.shininessTexture.get().image.get());
                        }
                        usedTextures.insert(mat.shininessTexture.getUri());
                    }

                    totalShaderBufferSize += sizeof(ShaderDrawData);
                }
                objects.emplace_back(object);
            }
        }

        shaderBufferRes = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .bufferType = RenderBufferType::HOST_VISIBLE,
                .size = totalShaderBufferSize
        });
        builder.write(shaderBufferRes);

        boneBufferRes = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .bufferType = RenderBufferType::HOST_VISIBLE,
                .size = sizeof(Mat4f) * boneCount
        });
        builder.write(boneBufferRes);

        atlas.setup(builder);

        if (vertexBufferRes.assigned) {
            builder.read(vertexBufferRes);
            builder.write(vertexBufferRes);
            builder.persist(vertexBufferRes);
        }

        if (indexBufferRes.assigned) {
            builder.read(indexBufferRes);
            builder.write(indexBufferRes);
            builder.persist(indexBufferRes);
        }

        if (!vertexBufferRes.assigned || currentVertexBufferSize < meshAllocator.getRequestedVertexBufferSize()) {
            staleVertexBuffer = vertexBufferRes;
            auto d = VertexBufferDesc();
            d.size = meshAllocator.getRequestedVertexBufferSize();
            vertexBufferRes = builder.createVertexBuffer(d);
            currentVertexBufferSize = d.size;
            builder.read(vertexBufferRes);
            builder.write(vertexBufferRes);
            builder.persist(vertexBufferRes);
        }

        if (!indexBufferRes.assigned || currentIndexBufferSize < meshAllocator.getRequestedIndexBufferSize()) {
            staleIndexBuffer = indexBufferRes;
            auto d = IndexBufferDesc();
            d.size = meshAllocator.getRequestedIndexBufferSize();
            indexBufferRes = builder.createIndexBuffer(d);
            currentIndexBufferSize = d.size;
            builder.read(indexBufferRes);
            builder.write(indexBufferRes);
            builder.persist(indexBufferRes);
        }

        auto &cam = builder.getScene().rootNode.getProperty<Scene::CameraProperty>();
        camera = cam.camera;
        cameraTransform = cam.cameraTransform;

        desc.format = RGBA;

        screenColor = builder.createTextureBuffer(desc);
        deferredColor = builder.createTextureBuffer(desc);
        forwardColor = builder.createTextureBuffer(desc);

        desc.format = DEPTH_STENCIL;

        screenDepth = builder.createTextureBuffer(desc);
        deferredDepth = builder.createTextureBuffer(desc);
        forwardDepth = builder.createTextureBuffer(desc);

        builder.write(screenColor);
        builder.write(screenDepth);

        builder.write(deferredColor);
        builder.write(deferredDepth);

        builder.write(forwardColor);
        builder.write(forwardDepth);

        builder.assignSlot(SLOT_SCREEN_COLOR, screenColor);
        builder.assignSlot(SLOT_SCREEN_DEPTH, screenDepth);

        builder.assignSlot(SLOT_DEFERRED_COLOR, deferredColor);
        builder.assignSlot(SLOT_DEFERRED_DEPTH, deferredDepth);

        builder.assignSlot(SLOT_FORWARD_COLOR, forwardColor);
        builder.assignSlot(SLOT_FORWARD_DEPTH, forwardDepth);

        builder.assignSlot(SLOT_GBUFFER_POSITION, gBufferPosition);
        builder.assignSlot(SLOT_GBUFFER_NORMAL, gBufferNormal);
        builder.assignSlot(SLOT_GBUFFER_TANGENT, gBufferTangent);
        builder.assignSlot(SLOT_GBUFFER_ROUGHNESS_METALLIC_AO, gBufferRoughnessMetallicAmbientOcclusion);
        builder.assignSlot(SLOT_GBUFFER_ALBEDO, gBufferAlbedo);
        builder.assignSlot(SLOT_GBUFFER_AMBIENT, gBufferAmbient);
        builder.assignSlot(SLOT_GBUFFER_SPECULAR, gBufferSpecular);
        builder.assignSlot(SLOT_GBUFFER_MODEL_OBJECT, gBufferModelObject);
        builder.assignSlot(SLOT_GBUFFER_DEPTH, gBufferDepth);

        commandBuffer = builder.createCommandBuffer();
        builder.write(commandBuffer);
    }

    void ConstructionPass::execute(FrameGraphPassResources &resources,
                                   const std::vector<std::reference_wrapper<CommandQueue>> &renderQueues,
                                   const std::vector<std::reference_wrapper<CommandQueue>> &computeQueues,
                                   const std::vector<std::reference_wrapper<CommandQueue>> &transferQueues) {
        auto &target = resources.get<RenderTarget>(renderTargetRes);
        auto &pipeline = resources.get<RenderPipeline>(renderPipelineRes);
        auto &skinnedPipeline = resources.get<RenderPipeline>(renderPipelineSkinnedRes);
        auto &pass = resources.get<RenderPass>(renderPassRes);

        auto &shaderBuffer = resources.get<ShaderStorageBuffer>(shaderBufferRes);
        auto &boneBuffer = resources.get<ShaderStorageBuffer>(boneBufferRes);
        auto &vertexArrayObject = resources.get<VertexArrayObject>(vertexArrayObjectRes);
        auto &vertexBuffer = resources.get<VertexBuffer>(vertexBufferRes);
        auto &indexBuffer = resources.get<IndexBuffer>(indexBufferRes);

        auto &posTex = resources.get<TextureBuffer>(gBufferPosition);
        auto &normalTex = resources.get<TextureBuffer>(gBufferNormal);
        auto &tanTex = resources.get<TextureBuffer>(gBufferTangent);
        auto &roughMetallicAOTex = resources.get<TextureBuffer>(gBufferRoughnessMetallicAmbientOcclusion);
        auto &albedoTex = resources.get<TextureBuffer>(gBufferAlbedo);
        auto &ambientTex = resources.get<TextureBuffer>(gBufferAmbient);
        auto &specularTex = resources.get<TextureBuffer>(gBufferSpecular);
        auto &modelObjectTex = resources.get<TextureBuffer>(gBufferModelObject);
        auto &depthTex = resources.get<TextureBuffer>(gBufferDepth);

        auto &screenColorTex = resources.get<TextureBuffer>(screenColor);
        auto &screenDepthTex = resources.get<TextureBuffer>(screenDepth);

        auto &deferredColorTex = resources.get<TextureBuffer>(deferredColor);
        auto &deferredDepthTex = resources.get<TextureBuffer>(deferredDepth);

        auto &forwardColorTex = resources.get<TextureBuffer>(forwardColor);
        auto &forwardDepthTex = resources.get<TextureBuffer>(forwardDepth);

        auto &clearTarget = resources.get<RenderTarget>(clearTargetRes);
        auto &clearPass = resources.get<RenderPass>(clearPassRes);

        auto &cBuffer = resources.get<CommandBuffer>(commandBuffer);

        auto atlasBuffers = atlas.getAtlasBuffers(resources, cBuffer, renderQueues.at(0));

        // Clear textures
        clearTarget.setAttachments({screenColorTex, deferredColorTex, forwardColorTex}, screenDepthTex);

        std::vector<Command> commands;

        commands.emplace_back(clearPass.begin(clearTarget));
        commands.emplace_back(clearPass.clearColorAttachments(ColorRGBA(0)));
        commands.emplace_back(clearPass.clearDepthAttachment(1));
        commands.emplace_back(clearPass.end());

        cBuffer.begin();
        cBuffer.add(commands);
        cBuffer.end();

        commands.clear();

        renderQueues.at(0).get().submit({cBuffer}, {}, {});

        clearTarget.setAttachments({}, deferredDepthTex);

        commands.emplace_back(clearPass.begin(clearTarget));
        commands.emplace_back(clearPass.clearDepthAttachment(1));
        commands.emplace_back(clearPass.end());

        cBuffer.begin();
        cBuffer.add(commands);
        cBuffer.end();

        commands.clear();

        renderQueues.at(0).get().submit({cBuffer}, {}, {});

        clearTarget.setAttachments({}, forwardDepthTex);

        commands.emplace_back(clearPass.begin(clearTarget));
        commands.emplace_back(clearPass.clearDepthAttachment(1));
        commands.emplace_back(clearPass.end());

        cBuffer.begin();
        cBuffer.add(commands);
        cBuffer.end();

        commands.clear();

        renderQueues.at(0).get().submit({cBuffer}, {}, {});

        clearTarget.setAttachments({}, depthTex);

        commands.emplace_back(clearPass.begin(clearTarget));
        commands.emplace_back(clearPass.clearDepthAttachment(1));
        commands.emplace_back(clearPass.end());

        cBuffer.begin();
        cBuffer.add(commands);
        cBuffer.end();

        commands.clear();

        renderQueues.at(0).get().submit({cBuffer}, {}, {});

        bool updateVao = false;
        if (staleVertexBuffer.assigned) {
            auto &staleBuffer = resources.get<VertexBuffer>(staleVertexBuffer);
            commands.emplace_back(vertexBuffer.copy(staleBuffer));
            staleVertexBuffer = {};
            updateVao = true;
        }

        if (staleIndexBuffer.assigned) {
            auto &staleBuffer = resources.get<IndexBuffer>(staleIndexBuffer);
            commands.emplace_back(indexBuffer.copy(staleBuffer));
            staleIndexBuffer = {};
            updateVao = true;
        }

        if (updateVao || bindVao) {
            bindVao = false;
            vertexArrayObject.setBuffers(vertexBuffer, indexBuffer);
        }

        meshAllocator.uploadMeshes(vertexBuffer, indexBuffer);

        // Deallocate unused meshes
        std::set<Uri> dealloc;
        for (auto &pair: meshAllocator.getMeshAllocations()) {
            if (usedMeshes.find(pair.first) == usedMeshes.end()) {
                dealloc.insert(pair.first);
            }
        }
        for (auto &uri: dealloc) {
            meshAllocator.deallocateMesh(ResourceHandle<SkinnedMesh>(uri));
        }

        // Deallocate unused textures
        dealloc.clear();
        for (auto &pair: textures) {
            if (usedTextures.find(pair.first) == usedTextures.end()) {
                dealloc.insert(pair.first);
            }
        }
        for (auto &uri: dealloc) {
            deallocateTexture(ResourceHandle<Texture>(uri));
        }

        // Draw geometry buffer
        target.setAttachments({
                                      posTex,
                                      normalTex,
                                      tanTex,
                                      roughMetallicAOTex,
                                      albedoTex,
                                      ambientTex,
                                      specularTex,
                                      modelObjectTex
                              },
                              depthTex);

        auto projection = camera.projection();
        auto view = Camera::view(cameraTransform);

        if (!objects.empty()) {
            std::vector<DrawCall> drawCalls;
            std::vector<size_t> baseVertices;
            std::vector<ShaderDrawData> shaderData;
            std::vector<Mat4f> boneMatrices;

            for (auto oi = 0; oi < objects.size(); oi++) {
                auto &object = objects.at(oi);
                auto &meshProp = object.getProperty<Scene::SkinnedMeshProperty>();

                auto rig = meshProp.mesh.get().rig;

                std::map<std::string, Mat4f> boneTransforms;
                auto it = object.properties.find(typeid(Scene::BoneTransformsProperty));
                if (it != object.properties.end()) {
                    boneTransforms = it->second->get<Scene::BoneTransformsProperty>().boneTransforms;
                }

                std::map<size_t, ResourceHandle<Material>> mats;
                it = object.properties.find(typeid(Scene::MaterialProperty));
                if (it != object.properties.end()) {
                    mats = it->second->get<Scene::MaterialProperty>().materials;
                }

                auto drawData = meshAllocator.getAllocatedMesh(meshProp.mesh);

                for (auto i = 0; i < meshProp.mesh.get().subMeshes.size() + 1; i++) {
                    auto model = object.getProperty<Scene::SkinnedMeshProperty>().transform.model();

                    auto &mesh = i == 0 ? meshProp.mesh.get() : meshProp.mesh.get().subMeshes.at(i - 1);

                    auto material = mesh.material.get();

                    auto mIt = mats.find(i);
                    if (mIt != mats.end()) {
                        material = mIt->second.get();
                    }

                    if (material.transparent
                        || material.shader.assigned()) {
                        continue;
                    }

                    auto boneOffset = boneMatrices.size();
                    if (mesh.bones.empty()){
                        boneOffset = -1;
                    } else {
                        for (auto &bone: mesh.bones) {
                            Mat4f mat;
                            auto bt = boneTransforms.find(bone);
                            if (bt != boneTransforms.end()) {
                                boneMatrices.emplace_back(bt->second);
                            } else {
                                boneMatrices.emplace_back(MatrixMath::identity());
                            }
                        }
                    }

                    auto data = ShaderDrawData();

                    data.model = model;
                    data.mvp = projection * view * model;
                    data.shadeModel_objectID_boneOffset[0] = material.shadingModel;
                    data.shadeModel_objectID_boneOffset[1] = static_cast<int>(oi);
                    data.shadeModel_objectID_boneOffset[2] = static_cast<int>(boneOffset);

                    data.metallic_roughness_ambientOcclusion_shininess[0] = material.metallic;
                    data.metallic_roughness_ambientOcclusion_shininess[1] = material.roughness;
                    data.metallic_roughness_ambientOcclusion_shininess[2] = material.ambientOcclusion;
                    data.metallic_roughness_ambientOcclusion_shininess[3] = material.shininess;

                    auto col = material.diffuse.divide().getMemory();
                    data.diffuseColor[0] = col[0];
                    data.diffuseColor[1] = col[1];
                    data.diffuseColor[2] = col[2];
                    data.diffuseColor[3] = col[3];

                    col = material.ambient.divide().getMemory();
                    data.ambientColor[0] = col[0];
                    data.ambientColor[1] = col[1];
                    data.ambientColor[2] = col[2];
                    data.ambientColor[3] = col[3];

                    col = material.specular.divide().getMemory();
                    data.specularColor[0] = col[0];
                    data.specularColor[1] = col[1];
                    data.specularColor[2] = col[2];
                    data.specularColor[3] = col[3];

                    data.normalIntensity[0] = material.normalIntensity;

                    if (material.metallicTexture.assigned()) {
                        auto tex = getTexture(material.metallicTexture, atlasBuffers);

                        data.metallic.level_index_filtering_assigned[0] = tex.level;
                        data.metallic.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.metallic.level_index_filtering_assigned[2] = material.metallicTexture.get().description.filterMag;
                        data.metallic.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.metallic.atlasScale_texSize[0] = atlasScale.x;
                        data.metallic.atlasScale_texSize[1] = atlasScale.y;
                        data.metallic.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.metallic.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.roughnessTexture.assigned()) {
                        auto tex = getTexture(material.roughnessTexture, atlasBuffers);

                        data.roughness.level_index_filtering_assigned[0] = tex.level;
                        data.roughness.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.roughness.level_index_filtering_assigned[2] = material.roughnessTexture.get().description.filterMag;
                        data.roughness.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.roughness.atlasScale_texSize[0] = atlasScale.x;
                        data.roughness.atlasScale_texSize[1] = atlasScale.y;
                        data.roughness.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.roughness.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.ambientOcclusionTexture.assigned()) {
                        auto tex = getTexture(material.ambientOcclusionTexture, atlasBuffers);

                        data.ambientOcclusion.level_index_filtering_assigned[0] = tex.level;
                        data.ambientOcclusion.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.ambientOcclusion.level_index_filtering_assigned[2] = material.ambientOcclusionTexture.get().description.filterMag;
                        data.ambientOcclusion.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.ambientOcclusion.atlasScale_texSize[0] = atlasScale.x;
                        data.ambientOcclusion.atlasScale_texSize[1] = atlasScale.y;
                        data.ambientOcclusion.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.ambientOcclusion.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.diffuseTexture.assigned()) {
                        auto tex = getTexture(material.diffuseTexture, atlasBuffers);

                        data.diffuse.level_index_filtering_assigned[0] = tex.level;
                        data.diffuse.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.diffuse.level_index_filtering_assigned[2] = material.diffuseTexture.get().description.filterMag;
                        data.diffuse.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.diffuse.atlasScale_texSize[0] = atlasScale.x;
                        data.diffuse.atlasScale_texSize[1] = atlasScale.y;
                        data.diffuse.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.diffuse.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.ambientTexture.assigned()) {
                        auto tex = getTexture(material.ambientTexture, atlasBuffers);

                        data.ambient.level_index_filtering_assigned[0] = tex.level;
                        data.ambient.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.ambient.level_index_filtering_assigned[2] = material.ambientTexture.get().description.filterMag;
                        data.ambient.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.ambient.atlasScale_texSize[0] = atlasScale.x;
                        data.ambient.atlasScale_texSize[1] = atlasScale.y;
                        data.ambient.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.ambient.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.specularTexture.assigned()) {
                        auto tex = getTexture(material.specularTexture, atlasBuffers);

                        data.specular.level_index_filtering_assigned[0] = tex.level;
                        data.specular.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.specular.level_index_filtering_assigned[2] = material.specularTexture.get().description.filterMag;
                        data.specular.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.specular.atlasScale_texSize[0] = atlasScale.x;
                        data.specular.atlasScale_texSize[1] = atlasScale.y;
                        data.specular.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.specular.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.shininessTexture.assigned()) {
                        auto tex = getTexture(material.shininessTexture, atlasBuffers);

                        data.shininess.level_index_filtering_assigned[0] = tex.level;
                        data.shininess.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.shininess.level_index_filtering_assigned[2] = material.shininessTexture.get().description.filterMag;
                        data.shininess.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.shininess.atlasScale_texSize[0] = atlasScale.x;
                        data.shininess.atlasScale_texSize[1] = atlasScale.y;
                        data.shininess.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.shininess.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    if (material.normal.assigned()) {
                        auto tex = getTexture(material.normal, atlasBuffers);

                        data.normal.level_index_filtering_assigned[0] = tex.level;
                        data.normal.level_index_filtering_assigned[1] = static_cast<int>(tex.index);
                        data.normal.level_index_filtering_assigned[2] = material.normal.get().description.filterMag;
                        data.normal.level_index_filtering_assigned[3] = 1;

                        auto atlasScale = tex.size.convert<float>()
                                          / TextureAtlas::getResolutionLevelSize(tex.level).convert<float>();

                        data.normal.atlasScale_texSize[0] = atlasScale.x;
                        data.normal.atlasScale_texSize[1] = atlasScale.y;
                        data.normal.atlasScale_texSize[2] = static_cast<float>(tex.size.x);
                        data.normal.atlasScale_texSize[3] = static_cast<float>(tex.size.y);
                    }

                    shaderData.emplace_back(data);

                    auto &draw = drawData.data.at(i);
                    drawCalls.emplace_back(draw.drawCall);
                    baseVertices.emplace_back(draw.baseVertex);
                }
            }

            commands.emplace_back(pass.begin(target));
            commands.emplace_back(pass.setViewport({}, target.getDescription().size));
            commands.emplace_back(skinnedPipeline.bind());
            commands.emplace_back(vertexArrayObject.bind());

            commands.emplace_back(pass.clearColorAttachments(ColorRGBA(0)));
            commands.emplace_back(pass.clearDepthAttachment(1));

            shaderBuffer.upload(0,
                                reinterpret_cast<const uint8_t *>(shaderData.data()),
                                shaderData.size() * sizeof(ShaderDrawData));
            boneBuffer.upload(0,
                              reinterpret_cast<const uint8_t *>(boneMatrices.data()),
                              boneMatrices.size() * sizeof(Mat4f));

            auto shaderRes = std::vector<ShaderResource>{
                    {shaderBuffer,                               {{VERTEX, ShaderResource::READ}, {FRAGMENT, ShaderResource::READ}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_8x8),         {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_16x16),       {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_32x32),       {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_64x64),       {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_128x128),     {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_256x256),     {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_512x512),     {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_1024x1024),   {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_2048x2048),   {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_4096x4096),   {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_8192x8192),   {{{FRAGMENT, ShaderResource::READ}}}},
                    {atlasBuffers.at(TEXTURE_ATLAS_16384x16384), {{{FRAGMENT, ShaderResource::READ}}}},
                    {boneBuffer,                                 {{VERTEX, ShaderResource::READ}}},
            };

            commands.emplace_back(RenderPipeline::bindShaderResources(shaderRes));
            commands.emplace_back(pass.multiDrawIndexed(drawCalls, baseVertices));
            commands.emplace_back(pass.end());

            cBuffer.begin();
            cBuffer.add(commands);
            cBuffer.end();

            renderQueues.at(0).get().submit(cBuffer);
        }

        target.setAttachments({});
    }

    std::type_index ConstructionPass::getTypeIndex() const {
        return typeid(ConstructionPass);
    }

    TextureAtlasHandle ConstructionPass::getTexture(const ResourceHandle<Texture> &texture,
                                                    std::map<TextureAtlasResolution, std::reference_wrapper<TextureArrayBuffer>> &atlasBuffers) {
        if (textures.find(texture.getUri()) == textures.end()) {
            auto handle = atlas.add(texture.get().image.get());
            textures[texture.getUri()] = handle;
        }
        return textures.at(texture.getUri());
    }

    void ConstructionPass::deallocateTexture(const ResourceHandle<Texture> &texture) {
        atlas.remove(textures.at(texture.getUri()));
        textures.erase(texture.getUri());
    }
}
