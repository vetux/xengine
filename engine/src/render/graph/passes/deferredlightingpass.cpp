/**
 *  xEngine - C++ Game Engine Library
 *  Copyright (C) 2023  Julian Zampiccoli
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "xng/render/graph/passes/deferredlightingpass.hpp"

#include "xng/render/graph/framegraphbuilder.hpp"

#include "xng/render/graph/passes/constructionpass.hpp"
#include "xng/render/graph/framegraphsettings.hpp"

#include "xng/render/geometry/vertexstream.hpp"

#include "graph/deferredlightingpass_vs.hpp" // Generated by cmake
#include "graph/deferredlightingpass_fs.hpp" // Generated by cmake

namespace xng {
#pragma pack(push, 1)
    struct PointLightData {
        std::array<float, 4> position;
        std::array<float, 4> color;
        std::array<float, 4> farPlane;
    };

    struct DirectionalLightData {
        std::array<float, 4> direction;
        std::array<float, 4> color;
        std::array<float, 4> farPlane;
    };

    struct SpotLightData {
        std::array<float, 4> position;
        std::array<float, 4> direction_quadratic;
        std::array<float, 4> color;
        std::array<float, 4> farPlane;
        std::array<float, 4> cutOff_outerCutOff_constant_linear;
    };

    struct ShaderStorageData {
        std::array<float, 4> viewPosition{};
        std::array<int, 4> enableShadows{};
    };
#pragma pack(pop)

    static std::pair<std::vector<PointLightData>, std::vector<PointLightData>> getPointLights(const Scene &scene) {
        std::vector<PointLightData> lights;
        std::vector<PointLightData> shadowLights;
        for (auto &node: scene.rootNode.findAll({typeid(PointLightProperty)})) {
            auto l = node.getProperty<PointLightProperty>().light;
            auto t = node.getProperty<TransformProperty>().transform;
            auto v = l.color.divide();
            auto tmp = PointLightData{
                    .position =  Vec4f(t.getPosition().x,
                                       t.getPosition().y,
                                       t.getPosition().z,
                                       0).getMemory(),
                    .color = Vec4f(v.x * l.power, v.y * l.power, v.z * l.power, 1).getMemory(),
                    .farPlane = Vec4f(l.shadowFarPlane, 0, 0, 0).getMemory()
            };
            if (l.castShadows)
                shadowLights.emplace_back(tmp);
            else
                lights.emplace_back(tmp);
        }
        return {lights, shadowLights};
    }

    static std::pair<std::vector<DirectionalLightData>, std::vector<DirectionalLightData>>
    getDirLights(const Scene &scene) {
        std::vector<DirectionalLightData> lights;
        std::vector<DirectionalLightData> shadowLights;
        for (auto &node: scene.rootNode.findAll({typeid(DirectionalLightProperty)})) {
            auto l = node.getProperty<DirectionalLightProperty>().light;
            auto v = l.color.divide();
            auto tmp = DirectionalLightData{
                    .direction =  Vec4f(l.direction.x,
                                        l.direction.y,
                                        l.direction.z,
                                        0).getMemory(),
                    .color = Vec4f(v.x * l.power, v.y * l.power, v.z * l.power, 1).getMemory(),
                    .farPlane = Vec4f(l.shadowFarPlane, 0, 0, 0).getMemory()
            };
            if (l.castShadows)
                shadowLights.emplace_back(tmp);
            else
                lights.emplace_back(tmp);
        }
        return {lights, shadowLights};
    }

    static float getCutOff(float angleDegrees) {
        return std::cos(degreesToRadians(angleDegrees));
    }

    static std::pair<std::vector<SpotLightData>, std::vector<SpotLightData>> getSpotLights(const Scene &scene) {
        std::vector<SpotLightData> lights;
        std::vector<SpotLightData> shadowLights;
        for (auto &node: scene.rootNode.findAll({typeid(SpotLightProperty)})) {
            auto l = node.getProperty<SpotLightProperty>().light;
            auto t = node.getProperty<TransformProperty>().transform;
            auto v = l.color.divide();
            auto tmp = SpotLightData{
                    .position =  Vec4f(t.getPosition().x,
                                       t.getPosition().y,
                                       t.getPosition().z,
                                       0).getMemory(),
                    .direction_quadratic =  Vec4f(l.direction.x,
                                                  l.direction.y,
                                                  l.direction.z,
                                                  l.quadratic).getMemory(),
                    .color = Vec4f(v.x * l.power, v.y * l.power, v.z * l.power, 1).getMemory(),
                    .farPlane = Vec4f(l.shadowFarPlane, 0, 0, 0).getMemory(),
                    .cutOff_outerCutOff_constant_linear = Vec4f(getCutOff(l.cutOff),
                                                                getCutOff(l.outerCutOff),
                                                                l.constant,
                                                                l.linear).getMemory()
            };
            if (l.castShadows)
                shadowLights.emplace_back(tmp);
            else
                lights.emplace_back(tmp);
        }
        return {lights, shadowLights};
    }

    DeferredLightingPass::DeferredLightingPass() = default;

    void DeferredLightingPass::setup(FrameGraphBuilder &builder) {
        auto scene = builder.getScene();

        if (!vertexBuffer.assigned) {
            VertexBufferDesc desc;
            desc.size = mesh.vertices.size() * mesh.vertexLayout.getSize();
            vertexBuffer = builder.createVertexBuffer(desc);
        }

        builder.persist(vertexBuffer);

        if (!pipeline.assigned) {
            pipeline = builder.createRenderPipeline(RenderPipelineDesc{
                    .shaders = {
                            {VERTEX,   deferredlightingpass_vs},
                            {FRAGMENT, deferredlightingpass_fs}
                    },
                    .bindings = {BIND_SHADER_STORAGE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_BUFFER,
                                 BIND_TEXTURE_ARRAY_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                                 BIND_SHADER_STORAGE_BUFFER,
                    },
                    .primitive = TRIANGLES,
                    .vertexLayout = mesh.vertexLayout,
                    .enableDepthTest = true,
                    .depthTestWrite = true,
            });
        }

        builder.persist(pipeline);

        auto renderSize = builder.getBackBufferDescription().size
                          * builder.getSettings().get<float>(FrameGraphSettings::SETTING_RENDER_SCALE);

        auto deferredColor = builder.getSlot(SLOT_DEFERRED_COLOR);
        auto deferredDepth = builder.getSlot(SLOT_DEFERRED_DEPTH);

        auto pointLightNodes = scene.rootNode.findAll({typeid(PointLightProperty)});

        size_t pointLights = 0;
        size_t shadowPointLights = 0;

        for (auto l: pointLightNodes) {
            if (l.getProperty<PointLightProperty>().light.castShadows)
                shadowPointLights++;
            else
                pointLights++;
        }

        auto dirLightNodes = scene.rootNode.findAll({typeid(DirectionalLightProperty)});

        size_t dirLights = 0;
        size_t shadowDirLights = 0;

        for (auto l: dirLightNodes) {
            if (l.getProperty<DirectionalLightProperty>().light.castShadows)
                shadowDirLights++;
            else
                dirLights++;
        }

        auto spotLightNodes = scene.rootNode.findAll({typeid(SpotLightProperty)});

        size_t spotLights = 0;
        size_t shadowSpotLights = 0;

        for (auto l: spotLightNodes) {
            if (l.getProperty<SpotLightProperty>().light.castShadows)
                shadowSpotLights++;
            else
                spotLights++;
        }

        auto shaderDataBuffer = builder.createShaderStorageBuffer(
                ShaderStorageBufferDesc{.size =  sizeof(ShaderStorageData)});

        auto pointLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(PointLightData) * pointLights
        });

        auto shadowPointLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(PointLightData) * shadowPointLights
        });

        auto dirLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(DirectionalLightData) * dirLights
        });

        auto shadowDirLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(DirectionalLightData) * shadowDirLights
        });

        auto spotLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(SpotLightData) * spotLights
        });

        auto shadowSpotLightBuffer = builder.createShaderStorageBuffer(ShaderStorageBufferDesc{
                .size = sizeof(SpotLightData) * shadowSpotLights
        });

        auto gBufferPosition = builder.getSlot(SLOT_GBUFFER_POSITION);
        auto gBufferNormal = builder.getSlot(SLOT_GBUFFER_NORMAL);
        auto gBufferTangent = builder.getSlot(SLOT_GBUFFER_TANGENT);
        auto gBufferRoughnessMetallicAO = builder.getSlot(SLOT_GBUFFER_ROUGHNESS_METALLIC_AO);
        auto gBufferAlbedo = builder.getSlot(SLOT_GBUFFER_ALBEDO);
        auto gBufferModelObject = builder.getSlot(SLOT_GBUFFER_OBJECT_SHADOWS);
        auto gBufferDepth = builder.getSlot(SLOT_GBUFFER_DEPTH);

        auto cameraTransform = builder.getScene().rootNode.find<CameraProperty>()
                .getProperty<TransformProperty>().transform;

        builder.upload(pointLightBuffer,
                       [scene]() {
                           auto lights = getPointLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.first.size() * sizeof(PointLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.first.data()));
                       });
        builder.upload(shadowPointLightBuffer,
                       [scene]() {
                           auto lights = getPointLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.second.size() * sizeof(PointLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.second.data()));
                       });

        builder.upload(dirLightBuffer,
                       [scene]() {
                           auto lights = getDirLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.first.size() * sizeof(DirectionalLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.first.data()));
                       });
        builder.upload(shadowDirLightBuffer,
                       [scene]() {
                           auto lights = getDirLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.second.size() * sizeof(DirectionalLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.second.data()));
                       });

        builder.upload(spotLightBuffer,
                       [scene]() {
                           auto lights = getSpotLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.first.size() * sizeof(SpotLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.first.data()));
                       });
        builder.upload(shadowSpotLightBuffer,
                       [scene]() {
                           auto lights = getSpotLights(scene);
                           return FrameGraphCommand::UploadBuffer(lights.second.size() * sizeof(SpotLightData),
                                                                  reinterpret_cast<const uint8_t *>(lights.second.data()));
                       });

        if (!quadAllocated) {
            quadAllocated = true;
            builder.upload(vertexBuffer, [this]() {
                auto verts = VertexStream().addVertices(mesh.vertices).getVertexBuffer();
                return FrameGraphCommand::UploadBuffer(verts.size(), verts.data());
            });
        }

        FrameGraphResource pointLightShadowMap{};
        if (builder.checkSlot(SLOT_SHADOW_MAP_POINT)) {
            pointLightShadowMap = builder.getSlot(FrameGraphSlot::SLOT_SHADOW_MAP_POINT);
        }

        auto defaultPointLightShadowMap = builder.createTextureArrayBuffer({});

        builder.upload(shaderDataBuffer,
                       [cameraTransform, pointLightShadowMap]() {
                           ShaderStorageData buf;
                           buf.viewPosition = Vec4f(cameraTransform.getPosition().x,
                                                    cameraTransform.getPosition().y,
                                                    cameraTransform.getPosition().z,
                                                    0).getMemory();
                           buf.enableShadows.at(0) = pointLightShadowMap.assigned;
                           return FrameGraphCommand::UploadBuffer(sizeof(ShaderStorageData),
                                                                  reinterpret_cast<const uint8_t *>(&buf));
                       });

        auto pointMap = pointLightShadowMap.assigned ? pointLightShadowMap : defaultPointLightShadowMap;

        builder.beginPass({FrameGraphAttachment::texture(deferredColor)}, FrameGraphAttachment::texture(deferredDepth));

        builder.setViewport({}, renderSize);

        builder.bindPipeline(pipeline);
        builder.bindVertexBuffers(vertexBuffer, {}, {}, mesh.vertexLayout, {});
        builder.bindShaderResources({
                                            {shaderDataBuffer,           {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferPosition,            {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferNormal,              {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferRoughnessMetallicAO, {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferAlbedo,              {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferModelObject,         {{FRAGMENT, ShaderResource::READ}}},
                                            {gBufferDepth,               {{FRAGMENT, ShaderResource::READ}}},
                                            {pointMap,                   {{FRAGMENT, ShaderResource::READ}}},
                                            {pointLightBuffer,           {{FRAGMENT, ShaderResource::READ}}},
                                            {shadowPointLightBuffer,     {{FRAGMENT, ShaderResource::READ}}},
                                            {dirLightBuffer,             {{FRAGMENT, ShaderResource::READ}}},
                                            {shadowDirLightBuffer,       {{FRAGMENT, ShaderResource::READ}}},
                                            {spotLightBuffer,            {{FRAGMENT, ShaderResource::READ}}},
                                            {shadowSpotLightBuffer,      {{FRAGMENT, ShaderResource::READ}}},
                                    });
        builder.drawArray(DrawCall(0, mesh.vertices.size()));
        builder.finishPass();
    }

    std::type_index DeferredLightingPass::getTypeIndex() const {
        return typeid(DeferredLightingPass);
    }
}